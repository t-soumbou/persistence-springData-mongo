
/*
 * Created on 2017-03-29 ( Date ISO 2017-03-29 - Time 11:30:14 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.springMongo;

import java.util.List;


import javax.inject.Named;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.demo.data.record.ReviewRecord;
import org.demo.persistence.ReviewPersistence;
import org.demo.persistence.impl.springMongo.commons.GenericSpringDataMongoDb;

/**
 * Review persistence service - SpringMongo implementation 
 * 
 * @author Telosys
 *
 */
@Named("ReviewPersistence")
public class ReviewPersistenceSpringMongo extends GenericSpringDataMongoDb<ReviewRecord> implements ReviewPersistence {

	/**
	 * Constructor
	 */
	public ReviewPersistenceSpringMongo() {
		super("review", ReviewRecord.class);
	}

	/**
	 * Creates a new bean instance and set its primary key value(s)
	 * 
	 * @param customerCode
	 * @param bookId
	 * @return the new instance
	 */
	private ReviewRecord newInstanceWithPrimaryKey(String customerCode, Integer bookId) {
		ReviewRecord record = new ReviewRecord();
        record.setCustomerCode(customerCode); 
        record.setBookId(bookId); 
		return record;
	}

	//-------------------------------------------------------------------------------------
	// Generic DAO abstract methods implementations
	//-------------------------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(ReviewRecord record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

	@Override
	protected Update updateQuery(ReviewRecord record) {
		Update update = new Update();
		update.set("reviewText", record.getReviewText());
		update.set("reviewNote", record.getReviewNote());
		update.set("creation", record.getCreation());
		update.set("lastUpdate", record.getLastUpdate());
		return update;
	}

	@Override
	protected Query queryForIdentifyBean(ReviewRecord record, MongoConverter converter) {
		Object keycustomerCode = converter.convertToMongoType(record.getCustomerCode());
		Object keybookId = converter.convertToMongoType(record.getBookId());
		Query query = new Query(Criteria.where("customerCode").is(keycustomerCode) .and("bookId").is(keybookId));
	    return query;
	}
	//-------------------------------------------------------------------------------------
	// Persistence interface implementations
	//-------------------------------------------------------------------------------------
	@Override
	public long countAll() {
		return super.doCountAll();
	}
	
	@Override
	public ReviewRecord create(ReviewRecord record) {
		super.doInsert(record);
		return record;
	}

	@Override
	public boolean delete(ReviewRecord record) {
		if(super.doExists(record))
			return super.doDelete(record);
		return false;
	}

	@Override
	public boolean deleteById(String customerCode, Integer bookId) {
		ReviewRecord record = newInstanceWithPrimaryKey(customerCode, bookId);
		if(super.doExists(record))
			return super.doDelete(record);
		return false;
	}

	@Override
	public boolean exists(ReviewRecord record) {
		return super.doExists(record);
	}

	@Override
	public boolean exists(String customerCode, Integer bookId) {
		ReviewRecord record = newInstanceWithPrimaryKey(customerCode, bookId);
		return super.doExists(record);
	}

	@Override
	public List<ReviewRecord> findAll() {
		return super.doSelectAll();
	}

	@Override
	public ReviewRecord findById(String customerCode, Integer bookId) {
        ReviewRecord record = newInstanceWithPrimaryKey(customerCode, bookId);
		return super.doSelect(record);
	}

	@Override
	public ReviewRecord save(ReviewRecord record) {
		if (super.doExists(record)) {
			super.doUpdate(record);
		} else {
			super.doInsert(record);
		}
        return record;
	}

	@Override
	public boolean update(ReviewRecord record) {
		return super.doUpdate(record);	
	}
}
