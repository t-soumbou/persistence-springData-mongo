
/*
 * Created on 2017-03-29 ( Date ISO 2017-03-29 - Time 11:30:14 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.springMongo;

import java.util.List;


import javax.inject.Named;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.demo.data.record.SynopsisRecord;
import org.demo.persistence.SynopsisPersistence;
import org.demo.persistence.impl.springMongo.commons.GenericSpringDataMongoDb;

/**
 * Synopsis persistence service - SpringMongo implementation 
 * 
 * @author Telosys
 *
 */
@Named("SynopsisPersistence")
public class SynopsisPersistenceSpringMongo extends GenericSpringDataMongoDb<SynopsisRecord> implements SynopsisPersistence {

	/**
	 * Constructor
	 */
	public SynopsisPersistenceSpringMongo() {
		super("synopsis", SynopsisRecord.class);
	}

	/**
	 * Creates a new bean instance and set its primary key value(s)
	 * 
	 * @param bookId
	 * @return the new instance
	 */
	private SynopsisRecord newInstanceWithPrimaryKey(Integer bookId) {
		SynopsisRecord record = new SynopsisRecord();
        record.setBookId(bookId); 
		return record;
	}

	//-------------------------------------------------------------------------------------
	// Generic DAO abstract methods implementations
	//-------------------------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(SynopsisRecord record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

	@Override
	protected Update updateQuery(SynopsisRecord record) {
		Update update = new Update();
		update.set("synopsis", record.getSynopsis());
		return update;
	}

	@Override
	protected Query queryForIdentifyBean(SynopsisRecord record, MongoConverter converter) {
		Object keybookId = converter.convertToMongoType(record.getBookId());
		Query query = new Query(Criteria.where("bookId").is(keybookId));
	    return query;
	}
	//-------------------------------------------------------------------------------------
	// Persistence interface implementations
	//-------------------------------------------------------------------------------------
	@Override
	public long countAll() {
		return super.doCountAll();
	}
	
	@Override
	public SynopsisRecord create(SynopsisRecord record) {
		super.doInsert(record);
		return record;
	}

	@Override
	public boolean delete(SynopsisRecord record) {
		if(super.doExists(record))
			return super.doDelete(record);
		return false;
	}

	@Override
	public boolean deleteById(Integer bookId) {
		SynopsisRecord record = newInstanceWithPrimaryKey(bookId);
		if(super.doExists(record))
			return super.doDelete(record);
		return false;
	}

	@Override
	public boolean exists(SynopsisRecord record) {
		return super.doExists(record);
	}

	@Override
	public boolean exists(Integer bookId) {
		SynopsisRecord record = newInstanceWithPrimaryKey(bookId);
		return super.doExists(record);
	}

	@Override
	public List<SynopsisRecord> findAll() {
		return super.doSelectAll();
	}

	@Override
	public SynopsisRecord findById(Integer bookId) {
        SynopsisRecord record = newInstanceWithPrimaryKey(bookId);
		return super.doSelect(record);
	}

	@Override
	public SynopsisRecord save(SynopsisRecord record) {
		if (super.doExists(record)) {
			super.doUpdate(record);
		} else {
			super.doInsert(record);
		}
        return record;
	}

	@Override
	public boolean update(SynopsisRecord record) {
		return super.doUpdate(record);	
	}
}
